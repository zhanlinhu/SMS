<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sms.dao.BaseCourseDao">
  <resultMap id="baseCourseMap" type="com.sms.entity.BaseCourse">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" property="name" />
    <result column="synopsis" property="synopsis" />
    <result column="college_id" property="collegeId" />
  </resultMap>
    <resultMap id="baseCourseDtoMap" type="com.sms.dto.BaseCourseDto">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="name" property="name" />
        <result column="synopsis" property="synopsis" />
        <result column="college_id" property="collegeId" />
        <result column="collegeName" property="collegeName" />
    </resultMap>
  <sql id="Base_Column_List">
    id, name, synopsis, college_id
  </sql>
  
  <select id="getBaseCourseForSelect" resultMap="baseCourseMap">
  	select id,name from t_base_course
  </select>


  <select id="getBaseCourse" resultMap="baseCourseDtoMap">
  	select BC.id, BC.name, BC.synopsis, college_id, C.name as collegeName
  	from t_base_course as BC, t_college as C where BC.college_id = C.id
  		<if test="param2 != null and param2 != ''">
            and (BC.name like CONCAT ('%',#{param2},'%'))
            or (C.name like CONCAT ('%',#{param2},'%'))
  		</if>
  	<if test="param1 != null">
  		limit #{param1.start}, #{param1.pageSize}
  	</if>
  </select>
  
  <select id="getTotalItemsCount" resultType="Integer">
  	select count(*)
    from t_base_course as BC, t_college as C
    where BC.college_id = C.id
    	<if test="_parameter != null and _parameter != ''">
    		and (BC.name like CONCAT ('%',#{searchKey},'%'))
            or (C.name like CONCAT ('%',#{searchKey},'%'))
    	</if>
  </select>
  
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="baseCourseMap">
    select 
    <include refid="Base_Column_List" />
    from t_base_course
    where id = #{id}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_base_course
    where id = #{id}
  </delete>
  
  <delete id="deleteInList" >
  	delete from t_base_course where id in
  		<foreach collection="list" item="id" separator="," open="(" close=")">
  			#{id}
  		</foreach>
  </delete>
  
  <insert id="insertBatch" parameterType="java.util.List">
  	insert into t_base_course (id, name, synopsis, college_id
      ) values 
      <foreach collection="list" item="item" separator="," >
  		(#{item.id}, #{item.name}, #{item.synopsis}, #{item.collegeId})
  	  </foreach>
  </insert>
  
  <insert id="insert" parameterType="com.sms.entity.BaseCourse">
    insert into t_base_course (id, name, synopsis, college_id)
    values (#{id}, #{name}, #{synopsis}, #{collegeId})
  </insert>
  <insert id="insertSelective" parameterType="com.sms.entity.BaseCourse">
    insert into t_base_course
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="synopsis != null">
        synopsis,
      </if>
        <if test="collegeId != null">
        college_id
        </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      <if test="name != null">
        #{name},
      </if>
      <if test="synopsis != null">
        #{synopsis},
      </if>
        <if test="collegeId != null">
            #{collegeId}
        </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sms.entity.BaseCourse">
    update t_base_course
    <set>
      <if test="name != null">
        name = #{name},
      </if>
      <if test="synopsis != null">
        synopsis = #{synopsis},
      </if>
        <if test="collegeId != null">
            college_id = #{collegeId}
        </if>
    </set>
    where id = #{id}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sms.entity.BaseCourse">
    update t_base_course
    set name = #{name}, synopsis = #{synopsis}, college_id = #{collegeId}
    where id = #{id}
  </update>
</mapper>